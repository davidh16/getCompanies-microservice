// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.7
// source: list_service.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ListOfCompaniesClient is the client API for ListOfCompanies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListOfCompaniesClient interface {
	GetCompaniesList(ctx context.Context, in *CompanyListReq, opts ...grpc.CallOption) (*CompaniesList, error)
}

type listOfCompaniesClient struct {
	cc grpc.ClientConnInterface
}

func NewListOfCompaniesClient(cc grpc.ClientConnInterface) ListOfCompaniesClient {
	return &listOfCompaniesClient{cc}
}

func (c *listOfCompaniesClient) GetCompaniesList(ctx context.Context, in *CompanyListReq, opts ...grpc.CallOption) (*CompaniesList, error) {
	out := new(CompaniesList)
	err := c.cc.Invoke(ctx, "/proto.ListOfCompanies/GetCompaniesList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListOfCompaniesServer is the server API for ListOfCompanies service.
// All implementations must embed UnimplementedListOfCompaniesServer
// for forward compatibility
type ListOfCompaniesServer interface {
	GetCompaniesList(context.Context, *CompanyListReq) (*CompaniesList, error)
	mustEmbedUnimplementedListOfCompaniesServer()
}

// UnimplementedListOfCompaniesServer must be embedded to have forward compatible implementations.
type UnimplementedListOfCompaniesServer struct {
}

func (UnimplementedListOfCompaniesServer) GetCompaniesList(context.Context, *CompanyListReq) (*CompaniesList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCompaniesList not implemented")
}
func (UnimplementedListOfCompaniesServer) mustEmbedUnimplementedListOfCompaniesServer() {}

// UnsafeListOfCompaniesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListOfCompaniesServer will
// result in compilation errors.
type UnsafeListOfCompaniesServer interface {
	mustEmbedUnimplementedListOfCompaniesServer()
}

func RegisterListOfCompaniesServer(s grpc.ServiceRegistrar, srv ListOfCompaniesServer) {
	s.RegisterService(&ListOfCompanies_ServiceDesc, srv)
}

func _ListOfCompanies_GetCompaniesList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompanyListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListOfCompaniesServer).GetCompaniesList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.ListOfCompanies/GetCompaniesList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListOfCompaniesServer).GetCompaniesList(ctx, req.(*CompanyListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ListOfCompanies_ServiceDesc is the grpc.ServiceDesc for ListOfCompanies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListOfCompanies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.ListOfCompanies",
	HandlerType: (*ListOfCompaniesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCompaniesList",
			Handler:    _ListOfCompanies_GetCompaniesList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "list_service.proto",
}
